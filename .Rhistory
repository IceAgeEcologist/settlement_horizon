most.common <- unique(c(most.common, markers[markers  %in% colnames(pol)]))
if (any(colSums(pol.counts[,most.common]) == 0)){
most.common = most.common[which(colSums(pol.counts[,most.common]) != 0)]
}
while(length(dev.list()) > 1)dev.off()
try(dev.off())
core.dat <- data.frame(depths = x$depth_mid[good.samps], pol.counts[,most.common])
write.table(core.dat, file=paste(path_count, '/', site, '.csv', sep=''),
row.names=FALSE, sep=',')
id.mod5   <- seq(1,length(good.samps))%%5
sample.id <- rep(0, length(good.samps))
sample.id[which(id.mod5 == 0)] = 1
sample.id <- as.factor(sample.id)
props.dat <- data.frame(depths = x$depth_mid[good.samps],  sample.id=sample.id, pol[,most.common] * 100)
m2 <- props.dat
m2[,3:ncol(m2)] <- m2[,3:ncol(m2)] * 5
m.melt  <- melt(props.dat, id = c('depths', 'sample.id'))
m2.melt <- melt(m2, id = c('depths', 'sample.id'))
m <- data.frame(rbind(m.melt, m2.melt),
exagr = factor(rep(c('no', 'yes'), each = nrow(m.melt)),
levels=c('no', 'yes')))
levels(m$variable)[levels(m$variable) == 'RUMEOXYR'] <- 'RUMEX'
m$value[m$value > 15 & m$exagr == 'yes'] <- 15
m$value[m$value > 15 & m$exagr == 'yes'] <- NA
taxa   = unique(m$variable)
for (i in 1:length(taxa)){
taxon = taxa[i]
if (any(m$value[m$variable == taxon]>15,na.rm=TRUE)){
m$value[m$exagr == 'yes' & m$variable == taxon] <- m$value[m$exagr == 'no' & m$variable== taxon]
}
}
p <- ggplot(m, aes(y=depths, x=value))+
geom_path(colour='steelblue4', aes(x=value, y=depths, linetype = exagr)) +
geom_vline(x=15, alpha=0) +
geom_segment(m[m$exagr == 'no',], mapping=aes(y=depths, x=0, yend=depths, xend=value, colour=sample.id)) +
scale_color_manual(values=c('steelblue4', 'darkorange1')) +
facet_grid(.~variable, space='free_x', scale='free_x') +
theme_bw(base_size=10) + ggtitle(site) +
theme(legend.position='none',axis.text.x=element_text(angle=90, hjust=1, vjust=0.5, size=rel(1)), panel.margin = unit(0.5, "lines")) +
scale_x_continuous(expand=c(0,0)) +
scale_y_reverse(expand=c(0,0)) + xlab('percent') + ylab('depth')
ggsave(file=paste(path_pd, '/', site, '.pdf', sep=''), width=12, height=8)
}
for (i in 1:nrow(clh.sites)){
print(i)
idx = which(clh$site == clh.sites$site[i])
#   datasetID = clh.sites$datasetID[i]
x = clh[idx,1:ncol(clh)]
coords = c(centers_alb[i,1], centers_alb[i,2])
plot.pd.clh(x, coords, map=us.shp, mainDir='pollen/settlement_horizon_ID')
}
head(x)
x$site
source('~/.active-rstudio-document', echo=TRUE)
for (i in 1:nrow(clh.sites)){
print(i)
idx = which(clh$site == clh.sites$site[i])
x = clh[idx,1:ncol(clh)]
coords = c(centers_alb[i,1], centers_alb[i,2])
plot.pd.clh(x, coords, map=us.shp, mainDir='pollen/settlement_horizon_ID')
plot.map(x, coords, map=us.shp, mainDir='pollen/settlement_horizon_ID')
}
plot.map <- function(x, coords_albers, map=us.shp, mainDir='pollen/settlement_horizon_ID', type){
if (type=='neo'){
site = paste(x$metadata$dataset$collection.handle, '_', x$metadata$dataset$dataset.id, sep='')
} else if (type=='clh'){
site = paste(toupper(x$site[1]), '_', x$datasetID, sep='')
}
path = file.path(mainDir, 'maps')
if (!file.exists(path)){
dir.create(path)
}
while(length(dev.list()) > 1)dev.off()
try(dev.off())
pdf(file=paste(path, '/', site, '_MAP.pdf', sep=''),
width=6, height = 4)
plot(coords_albers[1], coords_albers[2], type='n', xlim = c(5000, 1001000), ylim=c(600000, 1430000),
asp=1, xaxt='n', yaxt='n', ann=FALSE)
plot(us.shp, add=T, lwd=2)
points(coords_albers[1], coords_albers[2],col='orange', pch=19, cex=1.5)
title(main=site)
dev.off()
}
for (i in 1:nrow(clh.sites)){
print(i)
idx = which(clh$site == clh.sites$site[i])
x = clh[idx,1:ncol(clh)]
coords = c(centers_alb[i,1], centers_alb[i,2])
plot.pd.clh(x, coords, map=us.shp, mainDir='pollen/settlement_horizon_ID')
plot.map(x, coords, map=us.shp, mainDir='pollen/settlement_horizon_ID', type='clh')
}
x
site = paste(toupper(x$site[1]), '_', x$datasetID, sep='')
site
x$site
x$site[1]
source('~/Documents/paleon/pollen/r/utils/helpers.r', echo=TRUE)
for (i in 1:nrow(clh.sites)){
print(i)
idx = which(clh$site == clh.sites$site[i])
x = clh[idx,1:ncol(clh)]
coords = c(centers_alb[i,1], centers_alb[i,2])
plot.pd.clh(x, coords, map=us.shp, mainDir='pollen/settlement_horizon_ID')
plot.map(x, coords, map=us.shp, mainDir='pollen/settlement_horizon_ID', type='clh')
}
list.files(mainDir)
folder='pollen_diagrams'
list.files(file.path(mainDir,folder))
infiles = list.files(file.path(mainDir,folder))
outfile = 'pollen_diagrams.pdf'
mergePDF(infiles, outfile)
mergePDF <- function(infiles, outfile, os = "UNIX") {
version <- switch(os,
UNIX = "gs",
Win32 = "gswin32c",
Win64 = "gswin64c")
pre = " -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="
system(paste(paste(version, pre, outfile, sep = ""), infiles, collapse = " "))
}
mergePDF(infiles, outfile)
paste(paste(version, pre, outfile, sep = ""), infiles, collapse = " ")
pre = " -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="
paste(paste(version, pre, outfile, sep = ""), infiles, collapse = " ")
mergePDF(infiles, outfile)
getwd()
help(system)
system("gs -sDEVICE=pdfwrite -o pollen/pollen_diagrams.pdf pollen/settlement_horizon_ID/pollen_diagrams/*.pdf")
system("gs -sDEVICE=pdfwrite -o pollen/settlement_horizon_ID/maps.pdf pollen/settlement_horizon_ID/maps/*.pdf")
help(write.table)
library(maps)
get_datasetids <- function(){
gpids <- get_table(table.name='GeoPoliticalUnits')
gp_rows <- vector(length=3)
gp_rows[1] <- which(gpids$GeoPoliticalName == 'Wisconsin')
gp_rows[2] <- which(gpids$GeoPoliticalName == 'Minnesota')
gp_rows[3] <- which(gpids$GeoPoliticalName == 'Michigan')
ID1   <- gpids[gp_rows,1]
ID1   <- gpids[which(gpids$GeoPoliticalName == 'Wisconsin'),1]
ID2   <- gpids[which(gpids$GeoPoliticalName == 'Minnesota'),1]
ID3   <- gpids[which(gpids$GeoPoliticalName == 'Michigan'),1]
meta1  <- get_datasets(datasettype='pollen', gpid=ID1, ageold=(2000))
meta2  <- get_datasets(datasettype='pollen', gpid=ID2, ageold=(2000))
meta3  <- get_datasets(datasettype='pollen', gpid=ID3, ageold=(2000))
meta   <- c(meta1, meta2, meta3)
#meta   <- meta1
# create of vector of the DatasetIDs
umw = c('michigan:north', 'wisconsin', 'minnesota', 'michigan:south')
n      <- length(meta)
ids    <- vector(mode="numeric", length=0)
states <- vector(mode="numeric", length=0)
lat    <- vector(mode="numeric", length=0)
long   <- vector(mode="numeric", length=0)
site   <- vector(mode="character", length=0)
PI     <- vector(mode="character", length=0)
descriptor <- vector(mode="character", length=0)
for (i in 1:n){
if(meta[[i]]$DatasetType == 'pollen'){
x = unlist(meta[[i]]$Site$LongitudeWest)
y = unlist(meta[[i]]$Site$LatitudeNorth)
state = map.where(database = "state", x, y)
print(state)
if (is.element(state, umw)){
print(i)
states = c(states, state)
ids    = c(ids, unlist(meta[[i]]$DatasetID))# unlist(meta[[i]]$DatasetID)
long   = c(long, x)
lat    = c(lat, y)
site   = c(site, as.character(unlist(meta[[i]]$Site$SiteName)))
PI     = c(PI, as.character(unlist(meta[[i]]$DatasetPIs[1,2])))
about = as.character(meta[[i]]$Site$SiteDescription)
descriptor = c(descriptor, strsplit(about, '\\.')[[1]][1])
}
}
}
empty = rep(NA, length(ids))
pollen <- data.frame(site=site, datasetID=ids, long=long, lat=lat, state=states, pi=PI, pre=empty, settlement=empty, notes=empty)#, description=descriptor)
return(pollen)
}
pollen_meta <-get_datasetids()
head(pollen_meta)
get_calcolte <- function(){
clh.sites  <- read.csv('pollen/data/hotchkiss_lynch_calcote_meta.csv', stringsAsFactors = FALSE)
clh.counts <- read.csv('pollen/data/hotchkiss_lynch_calcote_counts.csv', stringsAsFactors = FALSE)
clh.sites$name <- gsub(" ","", clh.sites$name, fixed=TRUE)
clh.counts$name <- gsub(" ","", clh.counts$name, fixed=TRUE)
n <- nrow(clh.sites)
ids    <- vector(mode="numeric", length=0)
states <- vector(mode="numeric", length=0)
lat    <- vector(mode="numeric", length=0)
long   <- vector(mode="numeric", length=0)
site   <- vector(mode="character", length=0)
PI     <- vector(mode="character", length=0)
descriptor <- vector(mode="character", length=0)
site.count = 0
for (i in 1:n){
site.i <- as.character(clh.sites$name[i])
idx    <- which(clh.counts$name == site.i)
type   <- clh.counts[idx,1]
if (length(type) > 2){
site.count = site.count + 1
ids    = c(ids, paste('CLH', site.count, sep=''))
states = c(states, 'wisconsin')
site   = c(site, site.i)
lat    = c(lat, clh.sites$lat[i])
long   = c(long, clh.sites$long[i])
PI     = c(PI, clh.counts$analyst[idx[1]])
}
}
pollen_meta <- data.frame(datasetID=ids, handle=toupper(site), site=site, long=long, lat=lat, state=states, pi=PI, stringsAsFactors=FALSE)
return(pollen_meta)
}
pollen_meta_calcote <- get_calcote()
get_calcote <- function(){
clh.sites  <- read.csv('pollen/data/hotchkiss_lynch_calcote_meta.csv', stringsAsFactors = FALSE)
clh.counts <- read.csv('pollen/data/hotchkiss_lynch_calcote_counts.csv', stringsAsFactors = FALSE)
clh.sites$name <- gsub(" ","", clh.sites$name, fixed=TRUE)
clh.counts$name <- gsub(" ","", clh.counts$name, fixed=TRUE)
n <- nrow(clh.sites)
ids    <- vector(mode="numeric", length=0)
states <- vector(mode="numeric", length=0)
lat    <- vector(mode="numeric", length=0)
long   <- vector(mode="numeric", length=0)
site   <- vector(mode="character", length=0)
PI     <- vector(mode="character", length=0)
descriptor <- vector(mode="character", length=0)
site.count = 0
for (i in 1:n){
site.i <- as.character(clh.sites$name[i])
idx    <- which(clh.counts$name == site.i)
type   <- clh.counts[idx,1]
if (length(type) > 2){
site.count = site.count + 1
ids    = c(ids, paste('CLH', site.count, sep=''))
states = c(states, 'wisconsin')
site   = c(site, site.i)
lat    = c(lat, clh.sites$lat[i])
long   = c(long, clh.sites$long[i])
PI     = c(PI, clh.counts$analyst[idx[1]])
}
}
pollen_meta <- data.frame(datasetID=ids, handle=toupper(site), site=site, long=long, lat=lat, state=states, pi=PI, stringsAsFactors=FALSE)
return(pollen_meta)
}
pollen_meta_calcote <- get_calcote()
head(pollen_meta_calcote)
get_calcote <- function(){
clh.sites  <- read.csv('pollen/data/hotchkiss_lynch_calcote_meta.csv', stringsAsFactors = FALSE)
clh.counts <- read.csv('pollen/data/hotchkiss_lynch_calcote_counts.csv', stringsAsFactors = FALSE)
clh.sites$name <- gsub(" ","", clh.sites$name, fixed=TRUE)
clh.counts$name <- gsub(" ","", clh.counts$name, fixed=TRUE)
n <- nrow(clh.sites)
ids    <- vector(mode="numeric", length=0)
states <- vector(mode="numeric", length=0)
lat    <- vector(mode="numeric", length=0)
long   <- vector(mode="numeric", length=0)
site   <- vector(mode="character", length=0)
PI     <- vector(mode="character", length=0)
descriptor <- vector(mode="character", length=0)
site.count = 0
for (i in 1:n){
site.i <- as.character(clh.sites$name[i])
idx    <- which(clh.counts$name == site.i)
type   <- clh.counts[idx,1]
if (length(type) > 2){
site.count = site.count + 1
ids    = c(ids, paste('CLH', site.count, sep=''))
states = c(states, 'wisconsin')
site   = c(site, site.i)
lat    = c(lat, clh.sites$lat[i])
long   = c(long, clh.sites$long[i])
PI     = c(PI, clh.counts$analyst[idx[1]])
}
}
empty = rep(NA, length(ids))
pollen_meta <- data.frame(datasetID=ids, handle=toupper(site), site=site, long=long, lat=lat, state=states,
pi=PI, pre=empty, settlement=empty, notes=empty,
stringsAsFactors=FALSE)
return(pollen_meta)
}
pollen_meta_calcote <- get_calcote()
head(pollen_meta_calcote)
pollen_meta_neo = pollen_meta
head(pollen_meta)
library(maps)
get_datasetids <- function(){
gpids <- get_table(table.name='GeoPoliticalUnits')
gp_rows <- vector(length=3)
gp_rows[1] <- which(gpids$GeoPoliticalName == 'Wisconsin')
gp_rows[2] <- which(gpids$GeoPoliticalName == 'Minnesota')
gp_rows[3] <- which(gpids$GeoPoliticalName == 'Michigan')
ID1   <- gpids[gp_rows,1]
ID1   <- gpids[which(gpids$GeoPoliticalName == 'Wisconsin'),1]
ID2   <- gpids[which(gpids$GeoPoliticalName == 'Minnesota'),1]
ID3   <- gpids[which(gpids$GeoPoliticalName == 'Michigan'),1]
meta1  <- get_datasets(datasettype='pollen', gpid=ID1, ageold=(2000))
meta2  <- get_datasets(datasettype='pollen', gpid=ID2, ageold=(2000))
meta3  <- get_datasets(datasettype='pollen', gpid=ID3, ageold=(2000))
meta   <- c(meta1, meta2, meta3)
#meta   <- meta1
# create of vector of the DatasetIDs
umw = c('michigan:north', 'wisconsin', 'minnesota', 'michigan:south')
n      <- length(meta)
ids    <- vector(mode="numeric", length=0)
states <- vector(mode="numeric", length=0)
lat    <- vector(mode="numeric", length=0)
long   <- vector(mode="numeric", length=0)
site   <- vector(mode="character", length=0)
handle <- vector(mode="character", length=0)
PI     <- vector(mode="character", length=0)
descriptor <- vector(mode="character", length=0)
for (i in 1:n){
if(meta[[i]]$DatasetType == 'pollen'){
x = unlist(meta[[i]]$Site$LongitudeWest)
y = unlist(meta[[i]]$Site$LatitudeNorth)
state = map.where(database = "state", x, y)
print(state)
if (is.element(state, umw)){
print(i)
states = c(states, state)
ids    = c(ids, unlist(meta[[i]]$DatasetID))# unlist(meta[[i]]$DatasetID)
long   = c(long, x)
lat    = c(lat, y)
site   = c(site, as.character(unlist(meta[[i]]$Site$SiteName)))
handle = c(handle, x$metadata$dataset$collection.handle)
PI     = c(PI, as.character(unlist(meta[[i]]$DatasetPIs[1,2])))
about = as.character(meta[[i]]$Site$SiteDescription)
descriptor = c(descriptor, strsplit(about, '\\.')[[1]][1])
}
}
}
empty = rep(NA, length(ids))
pollen <- data.frame(datasetID=ids, handle=handle, site=site,  long=long, lat=lat, state=states,
pi=PI, pre=empty, settlement=empty, notes=empty,
stringsAsFactors=FALSE)#, description=descriptor)
return(pollen)
}
pollen_meta_neo <-get_datasetids()
gpids <- get_table(table.name='GeoPoliticalUnits')
gp_rows <- vector(length=3)
gp_rows[1] <- which(gpids$GeoPoliticalName == 'Wisconsin')
gp_rows[2] <- which(gpids$GeoPoliticalName == 'Minnesota')
gp_rows[3] <- which(gpids$GeoPoliticalName == 'Michigan')
ID1   <- gpids[gp_rows,1]
ID1   <- gpids[which(gpids$GeoPoliticalName == 'Wisconsin'),1]
ID2   <- gpids[which(gpids$GeoPoliticalName == 'Minnesota'),1]
ID3   <- gpids[which(gpids$GeoPoliticalName == 'Michigan'),1]
meta1  <- get_datasets(datasettype='pollen', gpid=ID1, ageold=(2000))
meta2  <- get_datasets(datasettype='pollen', gpid=ID2, ageold=(2000))
meta3  <- get_datasets(datasettype='pollen', gpid=ID3, ageold=(2000))
meta   <- c(meta1, meta2, meta3)
#meta   <- meta1
# create of vector of the DatasetIDs
umw = c('michigan:north', 'wisconsin', 'minnesota', 'michigan:south')
n      <- length(meta)
ids    <- vector(mode="numeric", length=0)
states <- vector(mode="numeric", length=0)
lat    <- vector(mode="numeric", length=0)
long   <- vector(mode="numeric", length=0)
site   <- vector(mode="character", length=0)
handle <- vector(mode="character", length=0)
PI     <- vector(mode="character", length=0)
descriptor <- vector(mode="character", length=0)
for (i in 1:n){
if(meta[[i]]$DatasetType == 'pollen'){
x = unlist(meta[[i]]$Site$LongitudeWest)
y = unlist(meta[[i]]$Site$LatitudeNorth)
state = map.where(database = "state", x, y)
print(state)
if (is.element(state, umw)){
print(i)
states = c(states, state)
ids    = c(ids, unlist(meta[[i]]$DatasetID))# unlist(meta[[i]]$DatasetID)
long   = c(long, x)
lat    = c(lat, y)
site   = c(site, as.character(unlist(meta[[i]]$Site$SiteName)))
handle = c(handle, unlist(meta[[i]]$metadata$dataset$collection.handle))
PI     = c(PI, as.character(unlist(meta[[i]]$DatasetPIs[1,2])))
about = as.character(meta[[i]]$Site$SiteDescription)
descriptor = c(descriptor, strsplit(about, '\\.')[[1]][1])
}
}
}
empty = rep(NA, length(ids))
pollen <- data.frame(datasetID=ids, handle=handle, site=site,  long=long, lat=lat, state=states,
pi=PI, pre=empty, settlement=empty, notes=empty,
stringsAsFactors=FALSE)#, description=descriptor)
handle
unlist(meta[[i]]$metadata$dataset$collection.handle)
names(meta[[i]])
meta[[i]]
n      <- length(meta)
ids    <- vector(mode="numeric", length=0)
states <- vector(mode="numeric", length=0)
lat    <- vector(mode="numeric", length=0)
long   <- vector(mode="numeric", length=0)
site   <- vector(mode="character", length=0)
handle <- vector(mode="character", length=0)
PI     <- vector(mode="character", length=0)
descriptor <- vector(mode="character", length=0)
for (i in 1:n){
if(meta[[i]]$DatasetType == 'pollen'){
x = unlist(meta[[i]]$Site$LongitudeWest)
y = unlist(meta[[i]]$Site$LatitudeNorth)
state = map.where(database = "state", x, y)
print(state)
if (is.element(state, umw)){
print(i)
states = c(states, state)
ids    = c(ids, unlist(meta[[i]]$DatasetID))# unlist(meta[[i]]$DatasetID)
long   = c(long, x)
lat    = c(lat, y)
site   = c(site, as.character(unlist(meta[[i]]$Site$SiteName)))
handle = c(handle, unlist(meta[[i]]$CollUnitHandle))
PI     = c(PI, as.character(unlist(meta[[i]]$DatasetPIs[1,2])))
about = as.character(meta[[i]]$Site$SiteDescription)
descriptor = c(descriptor, strsplit(about, '\\.')[[1]][1])
}
}
}
empty = rep(NA, length(ids))
pollen <- data.frame(datasetID=ids, handle=handle, site=site,  long=long, lat=lat, state=states,
pi=PI, pre=empty, settlement=empty, notes=empty,
stringsAsFactors=FALSE)#, description=descriptor)
head(pollen)
get_datasetids <- function(){
gpids <- get_table(table.name='GeoPoliticalUnits')
gp_rows <- vector(length=3)
gp_rows[1] <- which(gpids$GeoPoliticalName == 'Wisconsin')
gp_rows[2] <- which(gpids$GeoPoliticalName == 'Minnesota')
gp_rows[3] <- which(gpids$GeoPoliticalName == 'Michigan')
ID1   <- gpids[gp_rows,1]
ID1   <- gpids[which(gpids$GeoPoliticalName == 'Wisconsin'),1]
ID2   <- gpids[which(gpids$GeoPoliticalName == 'Minnesota'),1]
ID3   <- gpids[which(gpids$GeoPoliticalName == 'Michigan'),1]
meta1  <- get_datasets(datasettype='pollen', gpid=ID1, ageold=(2000))
meta2  <- get_datasets(datasettype='pollen', gpid=ID2, ageold=(2000))
meta3  <- get_datasets(datasettype='pollen', gpid=ID3, ageold=(2000))
meta   <- c(meta1, meta2, meta3)
#meta   <- meta1
# create of vector of the DatasetIDs
umw = c('michigan:north', 'wisconsin', 'minnesota', 'michigan:south')
n      <- length(meta)
ids    <- vector(mode="numeric", length=0)
states <- vector(mode="numeric", length=0)
lat    <- vector(mode="numeric", length=0)
long   <- vector(mode="numeric", length=0)
site   <- vector(mode="character", length=0)
handle <- vector(mode="character", length=0)
PI     <- vector(mode="character", length=0)
descriptor <- vector(mode="character", length=0)
for (i in 1:n){
if(meta[[i]]$DatasetType == 'pollen'){
x = unlist(meta[[i]]$Site$LongitudeWest)
y = unlist(meta[[i]]$Site$LatitudeNorth)
state = map.where(database = "state", x, y)
print(state)
if (is.element(state, umw)){
print(i)
states = c(states, state)
ids    = c(ids, unlist(meta[[i]]$DatasetID))# unlist(meta[[i]]$DatasetID)
long   = c(long, x)
lat    = c(lat, y)
site   = c(site, as.character(unlist(meta[[i]]$Site$SiteName)))
handle = c(handle, unlist(meta[[i]]$CollUnitHandle))
PI     = c(PI, as.character(unlist(meta[[i]]$DatasetPIs[1,2])))
about = as.character(meta[[i]]$Site$SiteDescription)
descriptor = c(descriptor, strsplit(about, '\\.')[[1]][1])
}
}
}
empty = rep(NA, length(ids))
pollen <- data.frame(datasetID=ids, handle=handle, site=site,  long=long, lat=lat, state=states,
pi=PI, pre=empty, settlement=empty, notes=empty,
stringsAsFactors=FALSE)#, description=descriptor)
return(pollen)
}
pollen_meta_neo <-get_datasetids()
pollen_meta_calcote <- get_calcote()
head(pollen_meta_calcote)
head(pollen_meta_neo)
pollen_meta <- rbind(pollen_meta_neo, pollen_meta_calcote)
head(pollen_meta)
write.table(pollen_meta, paste('pollen/pollen_meta_', Sys.Date(), '.csv', sep=''), row.names=FALSE, sep=',', na='')
source('~/Documents/paleon/pollen/r/get_meta.r', echo=TRUE)
mainDir  = getwd()
setwd('~/Documents/paleon/pollen/settlement_horizon/')
mainDir  = getwd()
all.sites <- read.csv(paste('pollen_meta_', use_date, '.csv', sep=''))
getwd()
use_date = '2014-05-01'
mainDir  = getwd()
all.sites <- read.csv(paste('pollen_meta_', use_date, '.csv', sep=''))
all.site$datasetID
all.sites$datasetID
all.sites <- read.csv(paste('pollen_meta_', use_date, '.csv', sep=''), stringsAsFactors=FALSE)
all.sites$datasetID
clh.sites <- all.sites[which(subtr(all.sites$datasetID,1,3) == 'CLH'),]
clh.sites <- all.sites[which(substr(all.sites$datasetID,1,3) == 'CLH'),]
head(clh.sites)
which(substr(all.sites$datasetID,1,3) == 'CLH')
substr(all.sites$datasetID,1,3) == 'CLH'
clh.sites <- all.sites[substr(all.sites$datasetID,1,3) == 'CLH',]
neo.sites <- all.sites[substr(all.sites$datasetID,1,3 != 'CLH',]
neo.sites <- all.sites[substr(all.sites$datasetID,1,3) != 'CLH',]
head(neo.sites)
dim(clh.sites)
heaD(pollen_meta)
head(pollen_meta)
with(pollen_meta, order(handle))
pollen_meta[with(pollen_meta, order(handle)),]
pollen_meta <- pollen_meta[with(pollen_meta, order(handle)),]
write.table(pollen_meta, paste('pollen_meta_', Sys.Date(), '.csv', sep=''), row.names=FALSE, sep=',', na='')
